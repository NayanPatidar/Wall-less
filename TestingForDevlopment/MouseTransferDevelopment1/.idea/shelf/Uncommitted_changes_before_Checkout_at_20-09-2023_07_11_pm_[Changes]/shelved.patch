Index: Patch3/src/main/java/Server/EventListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\nimport java.io.IOException;\r\nimport java.net.DatagramPacket;\r\nimport java.net.DatagramSocket;\r\nimport java.net.InetAddress;\r\n\r\npublic class EventListener {\r\n    static private JWindow jWindow;\r\n    private final MouseAdapter mouseAdapter;\r\n    private final KeyListener keyListener;\r\n    boolean altPress = false;\r\n    boolean ctrlPress = false;\r\n    boolean shiftPress = false;\r\n    public EventListener(JWindow jWindow, DatagramSocket datagramSocket, InetAddress inetAddress, int portUDP) {\r\n//        EventListener.jWindow =jWindow;\r\n        String leftClickPressed = \"B:3\";\r\n        String middleClickPressed = \"B:2\";\r\n        String rightClickPressed = \"B:1\";\r\n        byte[] bufferLeftPressed = leftClickPressed.getBytes();\r\n        byte[] bufferRightPressed = rightClickPressed.getBytes();\r\n        byte[] bufferMiddlePressed = middleClickPressed.getBytes();\r\n        String leftClickReleased = \"B:3'\";\r\n        String middleClickReleased = \"B:2'\";\r\n        String rightClickReleased = \"B:1'\";\r\n        byte[] bufferLeftReleased = leftClickReleased.getBytes();\r\n        byte[] bufferRightReleased = rightClickReleased.getBytes();\r\n        byte[] bufferMiddleReleased = middleClickReleased.getBytes();\r\n        DatagramPacket packetLeftReleased = new DatagramPacket(bufferLeftReleased, bufferLeftReleased.length, inetAddress, portUDP);\r\n        DatagramPacket packetMiddleReleased = new DatagramPacket(bufferMiddleReleased, bufferMiddleReleased.length, inetAddress, portUDP);\r\n        DatagramPacket packetRightReleased = new DatagramPacket(bufferRightReleased, bufferRightReleased.length, inetAddress, portUDP);\r\n        DatagramPacket packetLeftPressed = new DatagramPacket(bufferLeftPressed, bufferLeftPressed.length, inetAddress, portUDP);\r\n        DatagramPacket packetMiddlePressed = new DatagramPacket(bufferMiddlePressed, bufferMiddlePressed.length, inetAddress, portUDP);\r\n        DatagramPacket packetRightPressed = new DatagramPacket(bufferRightPressed, bufferRightPressed.length, inetAddress, portUDP);\r\n\r\n        String spaceKey = \"K:32\";\r\n        String enterKey = \"K:10\";\r\n        String tabKey = \"K:9\";\r\n        String shiftKey = \"K:16\";\r\n        String ctrlKey = \"K:17\";\r\n        String altKey = \"K:18\";\r\n        String escKey = \"K:27\";\r\n        String backspaceKey = \"K:8\";\r\n        String capsLockKey = \"K:20\";\r\n        String f1Key = \"K:112\";\r\n        String f2Key = \"K:113\";\r\n        String f3Key = \"K:114\";\r\n        String f4Key = \"K:115\";\r\n        String f5Key = \"K:116\";\r\n        String f6Key = \"K:117\";\r\n        String f7Key = \"K:118\";\r\n        String f8Key = \"K:119\";\r\n        String f9Key = \"K:120\";\r\n        String f10Key = \"K:121\";\r\n        String f11Key = \"K:122\";\r\n        String f12Key = \"K:123\";\r\n        String num0Key = \"K:48\";\r\n        String num1Key = \"K:49\";\r\n        String num2Key = \"K:50\";\r\n        String num3Key = \"K:51\";\r\n        String num4Key = \"K:52\";\r\n        String num5Key = \"K:53\";\r\n        String num6Key = \"K:54\";\r\n        String num7Key = \"K:55\";\r\n        String num8Key = \"K:56\";\r\n        String num9Key = \"K:57\";\r\n        String aKey = \"K:65\";\r\n        String bKey = \"K:66\";\r\n        String cKey = \"K:67\";\r\n        String dKey = \"K:68\";\r\n        String eKey = \"K:69\";\r\n        String fKey = \"K:70\";\r\n        String gKey = \"K:71\";\r\n        String hKey = \"K:72\";\r\n        String iKey = \"K:73\";\r\n        String jKey = \"K:74\";\r\n        String kKey = \"K:75\";\r\n        String lKey = \"K:76\";\r\n        String mKey = \"K:77\";\r\n        String nKey = \"K:78\";\r\n        String oKey = \"K:79\";\r\n        String pKey = \"K:80\";\r\n        String qKey = \"K:81\";\r\n        String rKey = \"K:82\";\r\n        String sKey = \"K:83\";\r\n        String tKey = \"K:84\";\r\n        String uKey = \"K:85\";\r\n        String vKey = \"K:86\";\r\n        String wKey = \"K:87\";\r\n        String xKey = \"K:88\";\r\n        String yKey = \"K:89\";\r\n        String zKey = \"K:90\";\r\n        String deleteKey = \"K:46\";\r\n        String equalKey = \"K:61\";\r\n        String minusKey = \"K:45\";\r\n        String endKey = \"K:35\";\r\n        String pageDownKey = \"K:34\";\r\n        String numLockKey = \"K:144\";\r\n        String homeKey = \"K:36\";\r\n        String backtickKey = \"K:192\";\r\n        String pageUpKey = \"K:33\";\r\n        String quoteKey = \"K:222\"; // Quote key (')\r\n        String semicolonKey = \"K:59\";\r\n        String periodKey = \"K:46\"; // Period key (.)\r\n        String commaKey = \"K:44\"; // Comma key (,)\r\n        String arrowUpKey = \"K:38\"; // Arrow Up key\r\n        String arrowDownKey = \"K:40\"; // Arrow Down key\r\n        String closeBracketKey = \"K:93\"; // Close Bracket key (])\r\n        String openBracketKey = \"K:91\"; // Open Bracket key ([)\r\n        String arrowLeftKey = \"K:37\"; // Arrow Left key\r\n        String arrowRightKey = \"K:39\"; // Arrow Right key\r\n        String backslashKey = \"K:92\"; // Backslash key (\\)\r\n        String forwardSlashKey = \"K:47\"; // Forward Slash key (/)\r\n\r\n        String spaceKey_released = \"K:32'\";\r\n        String enterKey_released = \"K:10'\";\r\n        String tabKey_released = \"K:9'\";\r\n        String shiftKey_released = \"K:16'\";\r\n        String ctrlKey_released = \"K:17'\";\r\n        String altKey_released = \"K:18'\";\r\n        String escKey_released = \"K:27'\";\r\n        String backspaceKey_released = \"K:8'\";\r\n        String capsLockKey_released = \"K:20'\";\r\n        String f1Key_released = \"K:112'\";\r\n        String f2Key_released = \"K:113'\";\r\n        String f3Key_released = \"K:114'\";\r\n        String f4Key_released = \"K:115'\";\r\n        String f5Key_released = \"K:116'\";\r\n        String f6Key_released = \"K:117'\";\r\n        String f7Key_released = \"K:118'\";\r\n        String f8Key_released = \"K:119'\";\r\n        String f9Key_released = \"K:120'\";\r\n        String f10Key_released = \"K:121'\";\r\n        String f11Key_released = \"K:122'\";\r\n        String f12Key_released = \"K:123'\";\r\n        String num0Key_released = \"K:48'\";\r\n        String num1Key_released = \"K:49'\";\r\n        String num2Key_released = \"K:50'\";\r\n        String num3Key_released = \"K:51'\";\r\n        String num4Key_released = \"K:52'\";\r\n        String num5Key_released = \"K:53'\";\r\n        String num6Key_released = \"K:54'\";\r\n        String num7Key_released = \"K:55'\";\r\n        String num8Key_released = \"K:56'\";\r\n        String num9Key_released = \"K:57'\";\r\n        String aKey_released = \"K:65'\";\r\n        String bKey_released = \"K:66'\";\r\n        String cKey_released = \"K:67'\";\r\n        String dKey_released = \"K:68'\";\r\n        String eKey_released = \"K:69'\";\r\n        String fKey_released = \"K:70'\";\r\n        String gKey_released = \"K:71'\";\r\n        String hKey_released = \"K:72'\";\r\n        String iKey_released = \"K:73'\";\r\n        String jKey_released = \"K:74'\";\r\n        String kKey_released = \"K:75'\";\r\n        String lKey_released = \"K:76'\";\r\n        String mKey_released = \"K:77'\";\r\n        String nKey_released = \"K:78'\";\r\n        String oKey_released = \"K:79'\";\r\n        String pKey_released = \"K:80'\";\r\n        String qKey_released = \"K:81'\";\r\n        String rKey_released = \"K:82'\";\r\n        String sKey_released = \"K:83'\";\r\n        String tKey_released = \"K:84'\";\r\n        String uKey_released = \"K:85'\";\r\n        String vKey_released = \"K:86'\";\r\n        String wKey_released = \"K:87'\";\r\n        String xKey_released = \"K:88'\";\r\n        String yKey_released = \"K:89'\";\r\n        String zKey_released = \"K:90'\";\r\n        String deleteKey_released = \"K:46'\";\r\n        String equalKey_released = \"K:61'\";\r\n        String minusKey_released = \"K:45'\";\r\n        String endKey_released = \"K:35'\";\r\n        String pageDownKey_released = \"K:34'\";\r\n        String numLockKey_released = \"K:144'\";\r\n        String homeKey_released = \"K:36'\";\r\n        String backtickKey_released = \"K:192'\";\r\n        String pageUpKey_released = \"K:33'\";\r\n        String quoteKey_released = \"K:222'\"; // Quote key (')\r\n        String semicolonKey_released = \"K:59'\";\r\n        String periodKey_released = \"K:46'\"; // Period key (.)\r\n        String commaKey_released = \"K:44'\"; // Comma key (,)\r\n        String arrowUpKey_released = \"K:38'\"; // Arrow Up key\r\n        String arrowDownKey_released = \"K:40'\"; // Arrow Down key\r\n        String closeBracketKey_released = \"K:93'\"; // Close Bracket key (])\r\n        String openBracketKey_released = \"K:91'\"; // Open Bracket key ([)\r\n        String arrowLeftKey_released = \"K:37'\"; // Arrow Left key\r\n        String arrowRightKey_released = \"K:39'\"; // Arrow Right key\r\n        String backslashKey_released = \"K:92'\"; // Backslash key (\\)\r\n        String forwardSlashKey_released = \"K:47'\"; // Forward Slash key (/)\r\n\r\n        byte[] pageUpKeyBytes = pageUpKey.getBytes();\r\n        byte[] backtickKeyBytes = backtickKey.getBytes();\r\n        byte[] deleteKey_pressed = deleteKey.getBytes();\r\n        byte[] spaceKey_pressed = spaceKey.getBytes();\r\n        byte[] enterKey_pressed = enterKey.getBytes();\r\n        byte[] tabKey_pressed = tabKey.getBytes();\r\n        byte[] shiftKey_pressed = shiftKey.getBytes();\r\n        byte[] ctrlKey_pressed = ctrlKey.getBytes();\r\n        byte[] altKey_pressed = altKey.getBytes();\r\n        byte[] escKey_pressed = escKey.getBytes();\r\n        byte[] backspaceKey_pressed = backspaceKey.getBytes();\r\n        byte[] capsLockKey_pressed = capsLockKey.getBytes();\r\n        byte[] f1Key_pressed = f1Key.getBytes();\r\n        byte[] f2Key_pressed = f2Key.getBytes();\r\n        byte[] f3Key_pressed = f3Key.getBytes();\r\n        byte[] f4Key_pressed = f4Key.getBytes();\r\n        byte[] f5Key_pressed = f5Key.getBytes();\r\n        byte[] f6Key_pressed = f6Key.getBytes();\r\n        byte[] f7Key_pressed = f7Key.getBytes();\r\n        byte[] f8Key_pressed = f8Key.getBytes();\r\n        byte[] f9Key_pressed = f9Key.getBytes();\r\n        byte[] f10Key_pressed = f10Key.getBytes();\r\n        byte[] f11Key_pressed = f11Key.getBytes();\r\n        byte[] f12Key_pressed = f12Key.getBytes();\r\n        byte[] num0Key_pressed = num0Key.getBytes();\r\n        byte[] num1Key_pressed = num1Key.getBytes();\r\n        byte[] num2Key_pressed = num2Key.getBytes();\r\n        byte[] num3Key_pressed = num3Key.getBytes();\r\n        byte[] num4Key_pressed = num4Key.getBytes();\r\n        byte[] num5Key_pressed = num5Key.getBytes();\r\n        byte[] num6Key_pressed = num6Key.getBytes();\r\n        byte[] num7Key_pressed = num7Key.getBytes();\r\n        byte[] num8Key_pressed = num8Key.getBytes();\r\n        byte[] num9Key_pressed = num9Key.getBytes();\r\n        byte[] aKey_pressed = aKey.getBytes();\r\n        byte[] bKey_pressed = bKey.getBytes();\r\n        byte[] cKey_pressed = cKey.getBytes();\r\n        byte[] dKey_pressed = dKey.getBytes();\r\n        byte[] eKey_pressed = eKey.getBytes();\r\n        byte[] fKey_pressed = fKey.getBytes();\r\n        byte[] gKey_pressed = gKey.getBytes();\r\n        byte[] hKey_pressed = hKey.getBytes();\r\n        byte[] iKey_pressed = iKey.getBytes();\r\n        byte[] jKey_pressed = jKey.getBytes();\r\n        byte[] kKey_pressed = kKey.getBytes();\r\n        byte[] lKey_pressed = lKey.getBytes();\r\n        byte[] mKey_pressed = mKey.getBytes();\r\n        byte[] nKey_pressed = nKey.getBytes();\r\n        byte[] oKey_pressed = oKey.getBytes();\r\n        byte[] pKey_pressed = pKey.getBytes();\r\n        byte[] qKey_pressed = qKey.getBytes();\r\n        byte[] rKey_pressed = rKey.getBytes();\r\n        byte[] sKey_pressed = sKey.getBytes();\r\n        byte[] tKey_pressed = tKey.getBytes();\r\n        byte[] uKey_pressed = uKey.getBytes();\r\n        byte[] vKey_pressed = vKey.getBytes();\r\n        byte[] wKey_pressed = wKey.getBytes();\r\n        byte[] xKey_pressed = xKey.getBytes();\r\n        byte[] yKey_pressed = yKey.getBytes();\r\n        byte[] zKey_pressed = zKey.getBytes();\r\n        byte[] equalKeyBytes = equalKey.getBytes();\r\n        byte[] minusKeyBytes = minusKey.getBytes();\r\n        byte[] endKeyBytes = endKey.getBytes();\r\n        byte[] pageDownKeyBytes = pageDownKey.getBytes();\r\n        byte[] numLockKeyBytes = numLockKey.getBytes();\r\n        byte[] homeKeyBytes = homeKey.getBytes();\r\n\r\n        byte[] spaceKey_released_bytes = spaceKey_released.getBytes();\r\n        byte[] enterKey_released_bytes = enterKey_released.getBytes();\r\n        byte[] tabKey_released_bytes = tabKey_released.getBytes();\r\n        byte[] shiftKey_released_bytes = shiftKey_released.getBytes();\r\n        byte[] ctrlKey_released_bytes = ctrlKey_released.getBytes();\r\n        byte[] altKey_released_bytes = altKey_released.getBytes();\r\n        byte[] escKey_released_bytes = escKey_released.getBytes();\r\n        byte[] backspaceKey_released_bytes = backspaceKey_released.getBytes();\r\n        byte[] capsLockKey_released_bytes = capsLockKey_released.getBytes();\r\n        byte[] f1Key_released_bytes = f1Key_released.getBytes();\r\n        byte[] f2Key_released_bytes = f2Key_released.getBytes();\r\n        byte[] f3Key_released_bytes = f3Key_released.getBytes();\r\n        byte[] f4Key_released_bytes = f4Key_released.getBytes();\r\n        byte[] f5Key_released_bytes = f5Key_released.getBytes();\r\n        byte[] f6Key_released_bytes = f6Key_released.getBytes();\r\n        byte[] f7Key_released_bytes = f7Key_released.getBytes();\r\n        byte[] f8Key_released_bytes = f8Key_released.getBytes();\r\n        byte[] f9Key_released_bytes = f9Key_released.getBytes();\r\n        byte[] f10Key_released_bytes = f10Key_released.getBytes();\r\n        byte[] f11Key_released_bytes = f11Key_released.getBytes();\r\n        byte[] f12Key_released_bytes = f12Key_released.getBytes();\r\n        byte[] num0Key_released_bytes = num0Key_released.getBytes();\r\n        byte[] num1Key_released_bytes = num1Key_released.getBytes();\r\n        byte[] num2Key_released_bytes = num2Key_released.getBytes();\r\n        byte[] num3Key_released_bytes = num3Key_released.getBytes();\r\n        byte[] num4Key_released_bytes = num4Key_released.getBytes();\r\n        byte[] num5Key_released_bytes = num5Key_released.getBytes();\r\n        byte[] num6Key_released_bytes = num6Key_released.getBytes();\r\n        byte[] num7Key_released_bytes = num7Key_released.getBytes();\r\n        byte[] num8Key_released_bytes = num8Key_released.getBytes();\r\n        byte[] num9Key_released_bytes = num9Key_released.getBytes();\r\n        byte[] aKey_released_bytes = aKey_released.getBytes();\r\n        byte[] bKey_released_bytes = bKey_released.getBytes();\r\n        byte[] cKey_released_bytes = cKey_released.getBytes();\r\n        byte[] dKey_released_bytes = dKey_released.getBytes();\r\n        byte[] eKey_released_bytes = eKey_released.getBytes();\r\n        byte[] fKey_released_bytes = fKey_released.getBytes();\r\n        byte[] gKey_released_bytes = gKey_released.getBytes();\r\n        byte[] hKey_released_bytes = hKey_released.getBytes();\r\n        byte[] iKey_released_bytes = iKey_released.getBytes();\r\n        byte[] jKey_released_bytes = jKey_released.getBytes();\r\n        byte[] kKey_released_bytes = kKey_released.getBytes();\r\n        byte[] lKey_released_bytes = lKey_released.getBytes();\r\n        byte[] mKey_released_bytes = mKey_released.getBytes();\r\n        byte[] nKey_released_bytes = nKey_released.getBytes();\r\n        byte[] oKey_released_bytes = oKey_released.getBytes();\r\n        byte[] pKey_released_bytes = pKey_released.getBytes();\r\n        byte[] qKey_released_bytes = qKey_released.getBytes();\r\n        byte[] rKey_released_bytes = rKey_released.getBytes();\r\n        byte[] sKey_released_bytes = sKey_released.getBytes();\r\n        byte[] tKey_released_bytes = tKey_released.getBytes();\r\n        byte[] uKey_released_bytes = uKey_released.getBytes();\r\n        byte[] vKey_released_bytes = vKey_released.getBytes();\r\n        byte[] wKey_released_bytes = wKey_released.getBytes();\r\n        byte[] xKey_released_bytes = xKey_released.getBytes();\r\n        byte[] yKey_released_bytes = yKey_released.getBytes();\r\n        byte[] zKey_released_bytes = zKey_released.getBytes();\r\n        byte[] deleteKey_released_bytes = deleteKey_released.getBytes();\r\n        byte[] equalKey_released_bytes = equalKey_released.getBytes();\r\n        byte[] minusKey_released_bytes = minusKey_released.getBytes();\r\n        byte[] endKey_released_bytes = endKey_released.getBytes();\r\n        byte[] pageDownKey_released_bytes = pageDownKey_released.getBytes();\r\n        byte[] numLockKey_released_bytes = numLockKey_released.getBytes();\r\n        byte[] homeKey_released_bytes = homeKey_released.getBytes();\r\n        byte[] backtickKey_released_bytes = backtickKey_released.getBytes();\r\n        byte[] pageUpKey_released_bytes = pageUpKey_released.getBytes();\r\n        byte[] quoteKey_released_bytes = quoteKey_released.getBytes();\r\n        byte[] semicolonKey_released_bytes = semicolonKey_released.getBytes();\r\n        byte[] periodKey_released_bytes = periodKey_released.getBytes();\r\n        byte[] commaKey_released_bytes = commaKey_released.getBytes();\r\n        byte[] arrowUpKey_released_bytes = arrowUpKey_released.getBytes();\r\n        byte[] arrowDownKey_released_bytes = arrowDownKey_released.getBytes();\r\n        byte[] closeBracketKey_released_bytes = closeBracketKey_released.getBytes();\r\n        byte[] openBracketKey_released_bytes = openBracketKey_released.getBytes();\r\n        byte[] arrowLeftKey_released_bytes = arrowLeftKey_released.getBytes();\r\n        byte[] arrowRightKey_released_bytes = arrowRightKey_released.getBytes();\r\n        byte[] backslashKey_released_bytes = backslashKey_released.getBytes();\r\n        byte[] forwardSlashKey_released_bytes = forwardSlashKey_released.getBytes();\r\n\r\n\r\n        DatagramPacket packet_deleteKey_pressed = new DatagramPacket(deleteKey_pressed, deleteKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_spaceKey_pressed = new DatagramPacket(spaceKey_pressed, spaceKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_enterKey_pressed = new DatagramPacket(enterKey_pressed, enterKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_tabKey_pressed = new DatagramPacket(tabKey_pressed, tabKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_shiftKey_pressed = new DatagramPacket(shiftKey_pressed, shiftKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_ctrlKey_pressed = new DatagramPacket(ctrlKey_pressed, ctrlKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_altKey_pressed = new DatagramPacket(altKey_pressed, altKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_escKey_pressed = new DatagramPacket(escKey_pressed, escKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_backspaceKey_pressed = new DatagramPacket(backspaceKey_pressed, backspaceKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_capsLockKey_pressed = new DatagramPacket(capsLockKey_pressed, capsLockKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f1Key_pressed = new DatagramPacket(f1Key_pressed, f1Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f2Key_pressed = new DatagramPacket(f2Key_pressed, f2Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f3Key_pressed = new DatagramPacket(f3Key_pressed, f3Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f4Key_pressed = new DatagramPacket(f4Key_pressed, f4Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f5Key_pressed = new DatagramPacket(f5Key_pressed, f5Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f6Key_pressed = new DatagramPacket(f6Key_pressed, f6Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f7Key_pressed = new DatagramPacket(f7Key_pressed, f7Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f8Key_pressed = new DatagramPacket(f8Key_pressed, f8Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f9Key_pressed = new DatagramPacket(f9Key_pressed, f9Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f10Key_pressed = new DatagramPacket(f10Key_pressed, f10Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f11Key_pressed = new DatagramPacket(f11Key_pressed, f11Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_f12Key_pressed = new DatagramPacket(f12Key_pressed, f12Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num0Key_pressed = new DatagramPacket(num0Key_pressed, num0Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num1Key_pressed = new DatagramPacket(num1Key_pressed, num1Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num2Key_pressed = new DatagramPacket(num2Key_pressed, num2Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num3Key_pressed = new DatagramPacket(num3Key_pressed, num3Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num4Key_pressed = new DatagramPacket(num4Key_pressed, num4Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num5Key_pressed = new DatagramPacket(num5Key_pressed, num5Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num6Key_pressed = new DatagramPacket(num6Key_pressed, num6Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num7Key_pressed = new DatagramPacket(num7Key_pressed, num7Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num8Key_pressed = new DatagramPacket(num8Key_pressed, num8Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_num9Key_pressed = new DatagramPacket(num9Key_pressed, num9Key_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_aKey_pressed = new DatagramPacket(aKey_pressed, aKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_bKey_pressed = new DatagramPacket(bKey_pressed, bKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_cKey_pressed = new DatagramPacket(cKey_pressed, cKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_dKey_pressed = new DatagramPacket(dKey_pressed, dKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_eKey_pressed = new DatagramPacket(eKey_pressed, eKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_fKey_pressed = new DatagramPacket(fKey_pressed, fKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_gKey_pressed = new DatagramPacket(gKey_pressed, gKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_hKey_pressed = new DatagramPacket(hKey_pressed, hKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_iKey_pressed = new DatagramPacket(iKey_pressed, iKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_jKey_pressed = new DatagramPacket(jKey_pressed, jKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_kKey_pressed = new DatagramPacket(kKey_pressed, kKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_lKey_pressed = new DatagramPacket(lKey_pressed, lKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_mKey_pressed = new DatagramPacket(mKey_pressed, mKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_nKey_pressed = new DatagramPacket(nKey_pressed, nKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_oKey_pressed = new DatagramPacket(oKey_pressed, oKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_pKey_pressed = new DatagramPacket(pKey_pressed, pKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_qKey_pressed = new DatagramPacket(qKey_pressed, qKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_rKey_pressed = new DatagramPacket(rKey_pressed, rKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_sKey_pressed = new DatagramPacket(sKey_pressed, sKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_tKey_pressed = new DatagramPacket(tKey_pressed, tKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_uKey_pressed = new DatagramPacket(uKey_pressed, uKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_vKey_pressed = new DatagramPacket(vKey_pressed, vKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_wKey_pressed = new DatagramPacket(wKey_pressed, wKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_xKey_pressed = new DatagramPacket(xKey_pressed, xKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_yKey_pressed = new DatagramPacket(yKey_pressed, yKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packet_zKey_pressed = new DatagramPacket(zKey_pressed, zKey_pressed.length, inetAddress, portUDP);\r\n        DatagramPacket packetEqualKey = new DatagramPacket(equalKeyBytes, equalKeyBytes.length, inetAddress, portUDP);\r\n        DatagramPacket packetMinusKey = new DatagramPacket(minusKeyBytes, minusKeyBytes.length, inetAddress, portUDP);\r\n        DatagramPacket packetEndKey = new DatagramPacket(endKeyBytes, endKeyBytes.length, inetAddress, portUDP);\r\n        DatagramPacket packetPageDownKey = new DatagramPacket(pageDownKeyBytes, pageDownKeyBytes.length, inetAddress, portUDP);\r\n        DatagramPacket packetNumLockKey = new DatagramPacket(numLockKeyBytes, numLockKeyBytes.length, inetAddress, portUDP);\r\n        DatagramPacket packetHomeKey = new DatagramPacket(homeKeyBytes, homeKeyBytes.length, inetAddress, portUDP);\r\n        DatagramPacket packetBacktickKey = new DatagramPacket(backtickKeyBytes, backtickKeyBytes.length, inetAddress, portUDP);\r\n        DatagramPacket packetPageUpKey = new DatagramPacket(pageUpKeyBytes, pageUpKeyBytes.length, inetAddress, portUDP);\r\n\r\n        DatagramPacket spaceKeyReleasedPacket = new DatagramPacket(spaceKey_released_bytes, spaceKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket enterKeyReleasedPacket = new DatagramPacket(enterKey_released_bytes, enterKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket tabKeyReleasedPacket = new DatagramPacket(tabKey_released_bytes, tabKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket shiftKeyReleasedPacket = new DatagramPacket(shiftKey_released_bytes, shiftKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket ctrlKeyReleasedPacket = new DatagramPacket(ctrlKey_released_bytes, ctrlKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket altKeyReleasedPacket = new DatagramPacket(altKey_released_bytes, altKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket escKeyReleasedPacket = new DatagramPacket(escKey_released_bytes, escKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket backspaceKeyReleasedPacket = new DatagramPacket(backspaceKey_released_bytes, backspaceKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket capsLockKeyReleasedPacket = new DatagramPacket(capsLockKey_released_bytes, capsLockKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f1KeyReleasedPacket = new DatagramPacket(f1Key_released_bytes, f1Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f2KeyReleasedPacket = new DatagramPacket(f2Key_released_bytes, f2Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f3KeyReleasedPacket = new DatagramPacket(f3Key_released_bytes, f3Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f4KeyReleasedPacket = new DatagramPacket(f4Key_released_bytes, f4Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f5KeyReleasedPacket = new DatagramPacket(f5Key_released_bytes, f5Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f6KeyReleasedPacket = new DatagramPacket(f6Key_released_bytes, f6Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f7KeyReleasedPacket = new DatagramPacket(f7Key_released_bytes, f7Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f8KeyReleasedPacket = new DatagramPacket(f8Key_released_bytes, f8Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f9KeyReleasedPacket = new DatagramPacket(f9Key_released_bytes, f9Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f10KeyReleasedPacket = new DatagramPacket(f10Key_released_bytes, f10Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f11KeyReleasedPacket = new DatagramPacket(f11Key_released_bytes, f11Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket f12KeyReleasedPacket = new DatagramPacket(f12Key_released_bytes, f12Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num0KeyReleasedPacket = new DatagramPacket(num0Key_released_bytes, num0Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num1KeyReleasedPacket = new DatagramPacket(num1Key_released_bytes, num1Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num2KeyReleasedPacket = new DatagramPacket(num2Key_released_bytes, num2Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num3KeyReleasedPacket = new DatagramPacket(num3Key_released_bytes, num3Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num4KeyReleasedPacket = new DatagramPacket(num4Key_released_bytes, num4Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num5KeyReleasedPacket = new DatagramPacket(num5Key_released_bytes, num5Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num6KeyReleasedPacket = new DatagramPacket(num6Key_released_bytes, num6Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num7KeyReleasedPacket = new DatagramPacket(num7Key_released_bytes, num7Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num8KeyReleasedPacket = new DatagramPacket(num8Key_released_bytes, num8Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket num9KeyReleasedPacket = new DatagramPacket(num9Key_released_bytes, num9Key_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket aKeyReleasedPacket = new DatagramPacket(aKey_released_bytes, aKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket bKeyReleasedPacket = new DatagramPacket(bKey_released_bytes, bKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket cKeyReleasedPacket = new DatagramPacket(cKey_released_bytes, cKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket dKeyReleasedPacket = new DatagramPacket(dKey_released_bytes, dKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket eKeyReleasedPacket = new DatagramPacket(eKey_released_bytes, eKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket fKeyReleasedPacket = new DatagramPacket(fKey_released_bytes, fKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket gKeyReleasedPacket = new DatagramPacket(gKey_released_bytes, gKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket hKeyReleasedPacket = new DatagramPacket(hKey_released_bytes, hKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket iKeyReleasedPacket = new DatagramPacket(iKey_released_bytes, iKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket jKeyReleasedPacket = new DatagramPacket(jKey_released_bytes, jKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket kKeyReleasedPacket = new DatagramPacket(kKey_released_bytes, kKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket lKeyReleasedPacket = new DatagramPacket(lKey_released_bytes, lKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket mKeyReleasedPacket = new DatagramPacket(mKey_released_bytes, mKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket nKeyReleasedPacket = new DatagramPacket(nKey_released_bytes, nKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket oKeyReleasedPacket = new DatagramPacket(oKey_released_bytes, oKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket pKeyReleasedPacket = new DatagramPacket(pKey_released_bytes, pKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket qKeyReleasedPacket = new DatagramPacket(qKey_released_bytes, qKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket rKeyReleasedPacket = new DatagramPacket(rKey_released_bytes, rKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket sKeyReleasedPacket = new DatagramPacket(sKey_released_bytes, sKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket tKeyReleasedPacket = new DatagramPacket(tKey_released_bytes, tKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket uKeyReleasedPacket = new DatagramPacket(uKey_released_bytes, uKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket vKeyReleasedPacket = new DatagramPacket(vKey_released_bytes, vKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket wKeyReleasedPacket = new DatagramPacket(wKey_released_bytes, wKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket xKeyReleasedPacket = new DatagramPacket(xKey_released_bytes, xKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket yKeyReleasedPacket = new DatagramPacket(yKey_released_bytes, yKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket zKeyReleasedPacket = new DatagramPacket(zKey_released_bytes, zKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket deleteKeyReleasedPacket = new DatagramPacket(deleteKey_released_bytes, deleteKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket equalKeyReleasedPacket = new DatagramPacket(equalKey_released_bytes, equalKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket minusKeyReleasedPacket = new DatagramPacket(minusKey_released_bytes, minusKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket endKeyReleasedPacket = new DatagramPacket(endKey_released_bytes, endKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket pageDownKeyReleasedPacket = new DatagramPacket(pageDownKey_released_bytes, pageDownKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket numLockKeyReleasedPacket = new DatagramPacket(numLockKey_released_bytes, numLockKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket homeKeyReleasedPacket = new DatagramPacket(homeKey_released_bytes, homeKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket backtickKeyReleasedPacket = new DatagramPacket(backtickKey_released_bytes, backtickKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket pageUpKeyReleasedPacket = new DatagramPacket(pageUpKey_released_bytes, pageUpKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket quoteKeyReleasedPacket = new DatagramPacket(quoteKey_released_bytes, quoteKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket semicolonKeyReleasedPacket = new DatagramPacket(semicolonKey_released_bytes, semicolonKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket periodKeyReleasedPacket = new DatagramPacket(periodKey_released_bytes, periodKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket commaKeyReleasedPacket = new DatagramPacket(commaKey_released_bytes, commaKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket arrowUpKeyReleasedPacket = new DatagramPacket(arrowUpKey_released_bytes, arrowUpKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket arrowDownKeyReleasedPacket = new DatagramPacket(arrowDownKey_released_bytes, arrowDownKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket closeBracketKeyReleasedPacket = new DatagramPacket(closeBracketKey_released_bytes, closeBracketKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket openBracketKeyReleasedPacket = new DatagramPacket(openBracketKey_released_bytes, openBracketKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket arrowLeftKeyReleasedPacket = new DatagramPacket(arrowLeftKey_released_bytes, arrowLeftKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket arrowRightKeyReleasedPacket = new DatagramPacket(arrowRightKey_released_bytes, arrowRightKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket backslashKeyReleasedPacket = new DatagramPacket(backslashKey_released_bytes, backslashKey_released_bytes.length, inetAddress, portUDP);\r\n        DatagramPacket forwardSlashKeyReleasedPacket = new DatagramPacket(forwardSlashKey_released_bytes, forwardSlashKey_released_bytes.length, inetAddress, portUDP);\r\n\r\n\r\n\r\n        byte[] quoteKeyBytes = quoteKey.getBytes();\r\n        DatagramPacket packetQuoteKey = new DatagramPacket(quoteKeyBytes, quoteKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] periodKeyBytes = periodKey.getBytes();\r\n        DatagramPacket packetPeriodKey = new DatagramPacket(periodKeyBytes, periodKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] commaKeyBytes = commaKey.getBytes();\r\n        DatagramPacket packetCommaKey = new DatagramPacket(commaKeyBytes, commaKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] arrowUpKeyBytes = arrowUpKey.getBytes();\r\n        DatagramPacket packetArrowUpKey = new DatagramPacket(arrowUpKeyBytes, arrowUpKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] arrowDownKeyBytes = arrowDownKey.getBytes();\r\n        DatagramPacket packetArrowDownKey = new DatagramPacket(arrowDownKeyBytes, arrowDownKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] arrowLeftKeyBytes = arrowLeftKey.getBytes();\r\n        DatagramPacket packetArrowLeftKey = new DatagramPacket(arrowLeftKeyBytes, arrowLeftKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] arrowRightKeyBytes = arrowRightKey.getBytes();\r\n        DatagramPacket packetArrowRightKey = new DatagramPacket(arrowRightKeyBytes, arrowRightKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] forwardSlashKeyBytes = forwardSlashKey.getBytes();\r\n        DatagramPacket packetForwardSlashKey = new DatagramPacket(forwardSlashKeyBytes, forwardSlashKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] backslashKeyBytes = backslashKey.getBytes();\r\n        DatagramPacket packetBackslashKey = new DatagramPacket(backslashKeyBytes, backslashKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] openBracketKeyBytes = openBracketKey.getBytes();\r\n        DatagramPacket packetOpenBracketKey = new DatagramPacket(openBracketKeyBytes, openBracketKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] closeBracketKeyBytes = closeBracketKey.getBytes();\r\n        DatagramPacket packetCloseBracketKey = new DatagramPacket(closeBracketKeyBytes, closeBracketKeyBytes.length, inetAddress, portUDP);\r\n\r\n        byte[] semicolonKeyBytes = semicolonKey.getBytes();\r\n        DatagramPacket packetSemicolonKey = new DatagramPacket(semicolonKeyBytes, semicolonKeyBytes.length, inetAddress, portUDP);\r\n\r\n        mouseAdapter = new MouseAdapter() {\r\n            @Override\r\n            public void mousePressed(MouseEvent e){\r\n                if (e.getButton() == MouseEvent.BUTTON1) {\r\n                    System.out.println(\"Left Button Pressed\");\r\n\r\n                    try {\r\n                        datagramSocket.send(packetLeftPressed);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n\r\n                } else if (e.getButton() == MouseEvent.BUTTON2) {\r\n                    System.out.println(\"Middle Button Pressed\");\r\n\r\n                    try {\r\n                        datagramSocket.send(packetMiddlePressed);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n\r\n                } else if (e.getButton() == MouseEvent.BUTTON3) {\r\n                    System.out.println(\"Right Button Pressed\");\r\n\r\n                    try {\r\n                        datagramSocket.send(packetRightPressed);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void mouseReleased(MouseEvent e) {\r\n                if (e.getButton() == MouseEvent.BUTTON1) {\r\n                    System.out.println(\"Left Button Released\");\r\n\r\n                    try {\r\n                        datagramSocket.send(packetLeftReleased);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n\r\n                } else if (e.getButton() == MouseEvent.BUTTON2) {\r\n                    System.out.println(\"Middle Button Released\");\r\n\r\n                    try {\r\n                        datagramSocket.send(packetMiddleReleased);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n\r\n                } else if (e.getButton() == MouseEvent.BUTTON3) {\r\n                    System.out.println(\"Right Button Released\");\r\n\r\n                    try {\r\n                        datagramSocket.send(packetRightReleased);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n\r\n                }\r\n            }\r\n        };\r\n\r\n        keyListener = new KeyListener() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                switch (e.getKeyCode()) {\r\n                    case KeyEvent.VK_SHIFT -> {\r\n                        if (!shiftPress) {\r\n                            try {\r\n                                System.out.println(\"Shift Pressed\");\r\n                                datagramSocket.send(packet_shiftKey_pressed);\r\n                                shiftPress = true;\r\n                            } catch (IOException ex) {\r\n                                throw new RuntimeException(ex);\r\n                            }\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_ALT -> {\r\n                        if (!altPress) {\r\n                            try {\r\n                                System.out.println(\"Alt Pressed\");\r\n                                datagramSocket.send(packet_altKey_pressed);\r\n                                altPress = true;\r\n                            } catch (IOException ex) {\r\n                                throw new RuntimeException(ex);\r\n                            }\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_CONTROL -> {\r\n                        if (!ctrlPress) {\r\n                            try {\r\n                                System.out.println(\"Control Pressed\");\r\n                                datagramSocket.send(packet_ctrlKey_pressed);\r\n                            } catch (IOException ex) {\r\n                                throw new RuntimeException(ex);\r\n                            }\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_A -> {\r\n                        try {\r\n                            datagramSocket.send(packet_aKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_B -> {\r\n                        try {\r\n                            datagramSocket.send(packet_bKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_C -> {\r\n                        try {\r\n                            datagramSocket.send(packet_cKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_D -> {\r\n                        try {\r\n                            datagramSocket.send(packet_dKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_E -> {\r\n                        try {\r\n                            datagramSocket.send(packet_eKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_F -> {\r\n                        try {\r\n                            datagramSocket.send(packet_fKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_G -> {\r\n                        try {\r\n                            datagramSocket.send(packet_gKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_H -> {\r\n                        try {\r\n                            datagramSocket.send(packet_hKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_I -> {\r\n                        try {\r\n                            datagramSocket.send(packet_iKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_J -> {\r\n                        try {\r\n                            datagramSocket.send(packet_jKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_K -> {\r\n                        try {\r\n                            datagramSocket.send(packet_kKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_L -> {\r\n                        try {\r\n                            datagramSocket.send(packet_lKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_M -> {\r\n                        try {\r\n                            datagramSocket.send(packet_mKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_N -> {\r\n                        try {\r\n                            datagramSocket.send(packet_nKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_O -> {\r\n                        try {\r\n                            datagramSocket.send(packet_oKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_P -> {\r\n                        try {\r\n                            datagramSocket.send(packet_pKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_Q -> {\r\n                        try {\r\n                            datagramSocket.send(packet_qKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_R -> {\r\n                        try {\r\n                            datagramSocket.send(packet_rKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_S -> {\r\n                        try {\r\n                            datagramSocket.send(packet_sKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_T -> {\r\n                        try {\r\n                            datagramSocket.send(packet_tKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_U -> {\r\n                        try {\r\n                            datagramSocket.send(packet_uKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_V -> {\r\n                        try {\r\n                            datagramSocket.send(packet_vKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_W -> {\r\n                        try {\r\n                            datagramSocket.send(packet_wKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_X -> {\r\n                        try {\r\n                            datagramSocket.send(packet_xKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_Y -> {\r\n                        try {\r\n                            datagramSocket.send(packet_yKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_Z -> {\r\n                        try {\r\n                            datagramSocket.send(packet_zKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '0' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num0Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '1' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num1Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '2' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num2Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '3' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num3Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '4' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num4Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '5' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num5Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '6' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num6Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '7' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num7Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '8' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num8Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '9' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_num9Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case ' ' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_spaceKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '\\n' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_enterKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '\\t' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_tabKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '\\b' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_backspaceKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case '\\u001B' -> {\r\n                        try {\r\n                            datagramSocket.send(packet_escKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_F1 -> {\r\n                        System.out.println(\"F1 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f1Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_F2 -> {\r\n                        System.out.println(\"F2 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f2Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                    }\r\n                    case KeyEvent.VK_F3 -> {\r\n                        System.out.println(\"F3 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f3Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n\r\n                    }\r\n                    case KeyEvent.VK_F4 -> {\r\n                        System.out.println(\"F4 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f4Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F5 -> {\r\n                        System.out.println(\"F5 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f5Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F6 -> {\r\n                        System.out.println(\"F6 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f6Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F7 -> {\r\n                        System.out.println(\"F7 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f7Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F8 -> {\r\n                        System.out.println(\"F8 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f8Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F9 -> {\r\n                        System.out.println(\"F9 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f9Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F10 -> {\r\n                        System.out.println(\"F10 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f10Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F11 -> {\r\n                        System.out.println(\"F11 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f11Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F12 -> {\r\n                        System.out.println(\"F12 Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_f12Key_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_DELETE -> {\r\n                        System.out.println(\"Delete Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_deleteKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_OPEN_BRACKET -> {\r\n                        System.out.println(\"Open Bracket Key\");\r\n                        try {\r\n                            datagramSocket.send(packetOpenBracketKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_CLOSE_BRACKET -> {\r\n                        System.out.println(\"Close Bracket Key\");\r\n                        try {\r\n                            datagramSocket.send(packetCloseBracketKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_SEMICOLON -> {\r\n\r\n                        System.out.println(\"Semicolon Key\");\r\n                        try {\r\n                            datagramSocket.send(packetSemicolonKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_SLASH -> {\r\n                        System.out.println(\"Slash Key\");\r\n                        try {\r\n                            datagramSocket.send(packetForwardSlashKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_BACK_SLASH -> {\r\n                        System.out.println(\"Backslash Key\");\r\n                        try {\r\n                            datagramSocket.send(packetBackslashKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_QUOTE -> {\r\n                        System.out.println(\"Quote Key\");\r\n                        try {\r\n                            datagramSocket.send(packetQuoteKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_UP -> {\r\n\r\n                        System.out.println(\"Up Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(packetArrowUpKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_DOWN -> {\r\n\r\n                        System.out.println(\"Down Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(packetArrowDownKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_LEFT -> {\r\n                        System.out.println(\"Left Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(packetArrowLeftKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_RIGHT -> {\r\n\r\n                        System.out.println(\"Right Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(packetArrowRightKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    // Comma Key\r\n                    case KeyEvent.VK_COMMA -> {\r\n                        System.out.println(\"Comma Key\");\r\n                        try {\r\n                            datagramSocket.send(packetCommaKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_PERIOD -> {\r\n                        System.out.println(\"Period Key\");\r\n                        try {\r\n                            datagramSocket.send(packetPeriodKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_EQUALS -> { // Equals (=) key\r\n                        System.out.println(\"Equals (=) Key\");\r\n                        try {\r\n                            datagramSocket.send(packetEqualKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_MINUS -> {\r\n                        // Minus (-) key\r\n                        System.out.println(\"Minus (-) Key\");\r\n                        try {\r\n                            datagramSocket.send(packetMinusKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_END -> { // End key\r\n                        System.out.println(\"End Key\");\r\n                        try {\r\n                            datagramSocket.send(packetEndKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_PAGE_UP-> {\r\n                        System.out.println(\"Page Up Key\");\r\n                        try {\r\n                            datagramSocket.send(packetPageUpKey);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_PAGE_DOWN-> { // Page Down key\r\n                        System.out.println(\"Page Down Key\");\r\n                        try {\r\n                            datagramSocket.send(packetPageDownKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_NUM_LOCK-> { // Num Lock key\r\n                        System.out.println(\"Num Lock Key\");\r\n                        try {\r\n                            datagramSocket.send(packetNumLockKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_HOME-> { // Home key\r\n                        System.out.println(\"Home Key\");\r\n                        try {\r\n                            datagramSocket.send(packetHomeKey);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 192 -> {\r\n                        // Backtick/Grave Accent key\r\n                        System.out.println(\"Backtick/Grave Accent Key\");\r\n                        try {\r\n                            datagramSocket.send(packetBacktickKey);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_CAPS_LOCK -> {\r\n                        System.out.println(\"Caps Lock Key\");\r\n                        try {\r\n                            datagramSocket.send(packet_capsLockKey_pressed);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void keyReleased(KeyEvent e) {\r\n                switch (e.getKeyCode()) {\r\n                    case KeyEvent.VK_SHIFT:\r\n                        try {\r\n                            System.out.println(\"Shift Released\");\r\n                            datagramSocket.send(shiftKeyReleasedPacket);\r\n                            shiftPress = false;\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_ALT:\r\n                        try {\r\n                            System.out.println(\"Alt Released\");\r\n                            datagramSocket.send(altKeyReleasedPacket);\r\n                            altPress = false;\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_CONTROL:\r\n                        try {\r\n                            System.out.println(\"Control Released\");\r\n                            datagramSocket.send(ctrlKeyReleasedPacket);\r\n                            ctrlPress = false;\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_A :{\r\n                        try {\r\n                            datagramSocket.send(aKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_B : {\r\n                        try {\r\n                            datagramSocket.send(bKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_C : {\r\n                        try {\r\n                            datagramSocket.send(cKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_D : {\r\n                        try {\r\n                            datagramSocket.send(dKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_E : {\r\n                        try {\r\n                            datagramSocket.send(eKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F :{\r\n                        try {\r\n                            datagramSocket.send(fKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_G : {\r\n                        try {\r\n                            datagramSocket.send(gKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_H : {\r\n                        try {\r\n                            datagramSocket.send(hKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_I : {\r\n                        try {\r\n                            datagramSocket.send(iKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_J : {\r\n                        try {\r\n                            datagramSocket.send(jKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_K : {\r\n                        try {\r\n                            datagramSocket.send(kKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_L :{\r\n                        try {\r\n                            datagramSocket.send(lKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_M : {\r\n                        try {\r\n                            datagramSocket.send(mKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_N: {\r\n                        try {\r\n                            datagramSocket.send(nKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_O : {\r\n                        try {\r\n                            datagramSocket.send(oKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_P :{\r\n                        try {\r\n                            datagramSocket.send(pKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_Q :{\r\n                        try {\r\n                            datagramSocket.send(qKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_R : {\r\n                        try {\r\n                            datagramSocket.send(rKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_S : {\r\n                        try {\r\n                            datagramSocket.send(sKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_T :{\r\n                        try {\r\n                            datagramSocket.send(tKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_U : {\r\n                        try {\r\n                            datagramSocket.send(uKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_V :{\r\n                        try {\r\n                            datagramSocket.send(vKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_W : {\r\n                        try {\r\n                            datagramSocket.send(wKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_X : {\r\n                        try {\r\n                            datagramSocket.send(xKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_Y : {\r\n                        try {\r\n                            datagramSocket.send(yKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_Z : {\r\n                        try {\r\n                            datagramSocket.send(zKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '0' : {\r\n                        try {\r\n                            datagramSocket.send(num0KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '1' : {\r\n                        try {\r\n                            datagramSocket.send(num1KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '2' : {\r\n                        try {\r\n                            datagramSocket.send(num2KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '3' : {\r\n                        try {\r\n                            datagramSocket.send(num3KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '4' : {\r\n                        try {\r\n                            datagramSocket.send(num4KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '5' : {\r\n                        try {\r\n                            datagramSocket.send(num5KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '6' : {\r\n                        try {\r\n                            datagramSocket.send(num6KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '7' : {\r\n                        try {\r\n                            datagramSocket.send(num7KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '8' : {\r\n                        try {\r\n                            datagramSocket.send(num8KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '9' : {\r\n                        try {\r\n                            datagramSocket.send(num9KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case ' ' : {\r\n                        try {\r\n                            datagramSocket.send(spaceKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '\\n' : {\r\n                        try {\r\n                            datagramSocket.send(enterKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '\\t' : {\r\n                        try {\r\n                            datagramSocket.send(tabKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '\\b' : {\r\n                        try {\r\n                            datagramSocket.send(backspaceKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '\\u001B' : {\r\n                        try {\r\n                            datagramSocket.send(escKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F1: {\r\n                        System.out.println(\"F1 Key\");\r\n                        try {\r\n                            datagramSocket.send(f1KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F2: {\r\n                        System.out.println(\"F2 Key\");\r\n                        try {\r\n                            datagramSocket.send(f2KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F3: {\r\n                        System.out.println(\"F3 Key\");\r\n                        try {\r\n                            datagramSocket.send(f3KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F4: {\r\n                        System.out.println(\"F4 Key\");\r\n                        try {\r\n                            datagramSocket.send(f4KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F5: {\r\n                        System.out.println(\"F5 Key\");\r\n                        try {\r\n                            datagramSocket.send(f5KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F6: {\r\n                        System.out.println(\"F6 Key\");\r\n                        try {\r\n                            datagramSocket.send(f6KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F7: {\r\n                        System.out.println(\"F7 Key\");\r\n                        try {\r\n                            datagramSocket.send(f7KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F8: {\r\n                        System.out.println(\"F8 Key\");\r\n                        try {\r\n                            datagramSocket.send(f8KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F9: {\r\n                        System.out.println(\"F9 Key\");\r\n                        try {\r\n                            datagramSocket.send(f9KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F10: {\r\n                        System.out.println(\"F10 Key\");\r\n                        try {\r\n                            datagramSocket.send(f10KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F11: {\r\n                        System.out.println(\"F11 Key\");\r\n                        try {\r\n                            datagramSocket.send(f11KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_F12: {\r\n                        System.out.println(\"F12 Key\");\r\n                        try {\r\n                            datagramSocket.send(f12KeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_DELETE: {\r\n                        System.out.println(\"Delete Key\");\r\n                        try {\r\n                            datagramSocket.send(deleteKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n                    case KeyEvent.VK_OPEN_BRACKET:\r\n                        System.out.println(\"Open Bracket Key\");\r\n                        try {\r\n                            datagramSocket.send(openBracketKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_CLOSE_BRACKET:\r\n                        System.out.println(\"Close Bracket Key\");\r\n                        try {\r\n                            datagramSocket.send(closeBracketKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_SEMICOLON:\r\n                        System.out.println(\"Semicolon Key\");\r\n                        try {\r\n                            datagramSocket.send(semicolonKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_SLASH:\r\n                        System.out.println(\"Slash Key\");\r\n                        try {\r\n                            datagramSocket.send(forwardSlashKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_BACK_SLASH:\r\n                        System.out.println(\"Backslash Key\");\r\n                        try {\r\n                            datagramSocket.send(backslashKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_QUOTE:\r\n                        System.out.println(\"Quote Key\");\r\n                        try {\r\n                            datagramSocket.send(quoteKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_UP:\r\n                        System.out.println(\"Up Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(arrowUpKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_DOWN:\r\n                        System.out.println(\"Down Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(arrowDownKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_LEFT:\r\n                        System.out.println(\"Left Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(arrowLeftKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_RIGHT:\r\n                        System.out.println(\"Right Arrow Key\");\r\n                        try {\r\n                            datagramSocket.send(arrowRightKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    // Comma Key\r\n                    case KeyEvent.VK_COMMA:\r\n                        System.out.println(\"Comma Key\");\r\n                        try {\r\n                            datagramSocket.send(commaKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_PERIOD:\r\n                        System.out.println(\"Period Key\");\r\n                        try {\r\n                            datagramSocket.send(periodKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_EQUALS: // Equals (=) key\r\n                        System.out.println(\"Equals (=) Key\");\r\n                        try {\r\n                            datagramSocket.send(equalKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_MINUS: // Minus (-) key\r\n                        System.out.println(\"Minus (-) Key\");\r\n                        try {\r\n                            datagramSocket.send(minusKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_END: // End key\r\n                        System.out.println(\"End Key\");\r\n                        try {\r\n                            datagramSocket.send(endKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_PAGE_UP:\r\n                        System.out.println(\"Page Up Key\");\r\n                        try {\r\n                            datagramSocket.send(pageUpKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_PAGE_DOWN: // Page Down key\r\n                        System.out.println(\"Page Down Key\");\r\n                        try {\r\n                            datagramSocket.send(pageDownKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_NUM_LOCK: // Num Lock key\r\n                        System.out.println(\"Num Lock Key\");\r\n                        try {\r\n                            datagramSocket.send(numLockKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n\r\n                    case KeyEvent.VK_HOME: // Home key\r\n                        System.out.println(\"Home Key\");\r\n                        try {\r\n                            datagramSocket.send(homeKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        break;\r\n                    case 192: // Backtick/Grave Accent key\r\n                        System.out.println(\"Backtick/Grave Accent Key\");\r\n                        try {\r\n                            datagramSocket.send(backtickKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    case KeyEvent.VK_CAPS_LOCK: {\r\n                        System.out.println(\"Caps Lock Key\");\r\n                        try {\r\n                            datagramSocket.send(capsLockKeyReleasedPacket);\r\n                        } catch (IOException ex) {\r\n                            System.out.println(ex.getLocalizedMessage());\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void keyTyped(KeyEvent e) {\r\n\r\n            }\r\n        };\r\n\r\n        jWindow.addMouseListener(mouseAdapter);\r\n        jWindow.addKeyListener(keyListener);\r\n\r\n\r\n    }\r\n    public void removeEventListeners() {\r\n        jWindow.removeKeyListener(keyListener);\r\n        jWindow.removeMouseListener(mouseAdapter);\r\n        System.out.println(\"KeyListener removed\");\r\n    }\r\n}\r\n
===================================================================
diff --git a/Patch3/src/main/java/Server/EventListener.java b/Patch3/src/main/java/Server/EventListener.java
--- a/Patch3/src/main/java/Server/EventListener.java	
+++ b/Patch3/src/main/java/Server/EventListener.java	
@@ -1898,7 +1898,7 @@
 
             }
         };
-
+        System.out.println("Adding the mouse and KeyListeners");
         jWindow.addMouseListener(mouseAdapter);
         jWindow.addKeyListener(keyListener);
 
Index: Patch3/src/main/java/Server/EventCaller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport javax.swing.*;\r\nimport java.net.DatagramSocket;\r\nimport java.net.InetAddress;\r\nimport java.net.Socket;\r\n\r\npublic class EventCaller implements Runnable{\r\n    static private JWindow jWindow;\r\n    private int val = 0;\r\n    private final SharedData sharedData;\r\n    Socket socket;\r\n    DatagramSocket datagramSocket;\r\n    EventListener eventListener;\r\n    InetAddress inetAddress;\r\n    int portUDP;\r\n    public EventCaller(JWindow jWindow, SharedData sharedData, Socket socket, DatagramSocket datagramSocket, InetAddress inetAddress, int portUDP) {\r\n        EventCaller.jWindow = jWindow;\r\n        this.sharedData = sharedData;\r\n        this.socket = socket;\r\n        this.datagramSocket = datagramSocket;\r\n        this.portUDP = portUDP;\r\n        this.inetAddress = inetAddress;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        while (true){\r\n            if ((sharedData.getForButtonClicks() == 0) && (val == 0)){\r\n                System.out.println(\"Calling Keyboard Functionality\");\r\n\r\n                SwingUtilities.invokeLater(() -> {\r\n                    eventListener = new EventListener(jWindow,datagramSocket, inetAddress, portUDP);\r\n                });\r\n                val ++;\r\n            } else if ((sharedData.getForButtonClicks() == 1) && (val == 1)){\r\n                if (eventListener != null) {\r\n                    System.out.println(\"Disposing Keyboard Functionality\");\r\n                    eventListener.removeEventListeners();\r\n                }\r\n                jWindow.dispose();\r\n                val --;\r\n            }\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/Patch3/src/main/java/Server/EventCaller.java b/Patch3/src/main/java/Server/EventCaller.java
--- a/Patch3/src/main/java/Server/EventCaller.java	
+++ b/Patch3/src/main/java/Server/EventCaller.java	
@@ -14,7 +14,8 @@
     EventListener eventListener;
     InetAddress inetAddress;
     int portUDP;
-    public EventCaller(JWindow jWindow, SharedData sharedData, Socket socket, DatagramSocket datagramSocket, InetAddress inetAddress, int portUDP) {
+
+    public EventCaller(JWindow jWindow, SharedData sharedData, DatagramSocket datagramSocket, InetAddress inetAddress, int portUDP) {
         EventCaller.jWindow = jWindow;
         this.sharedData = sharedData;
         this.socket = socket;
@@ -35,10 +36,11 @@
                 val ++;
             } else if ((sharedData.getForButtonClicks() == 1) && (val == 1)){
                 if (eventListener != null) {
-                    System.out.println("Disposing Keyboard Functionality");
                     eventListener.removeEventListeners();
                 }
+                jWindow.setVisible(false);
                 jWindow.dispose();
+                System.out.println("Disposing Keyboard Functionality");
                 val --;
             }
         }
